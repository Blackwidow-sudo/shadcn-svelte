{
	"name": "carousel",
	"dependencies": [
		"embla-carousel-svelte",
		"svelte-radix"
	],
	"registryDependencies": [
		"button"
	],
	"files": [
		{
			"name": "carousel-content.svelte",
			"content": "<script>import emblaCarouselSvelte from \"embla-carousel-svelte\";\nimport { getEmblaContext } from \"./context.js\";\nimport { cn } from \"$lib/utils.js\";\nlet {\n  ref = $bindable(null),\n  class: className,\n  children,\n  ...restProps\n} = $props();\nconst { orientation, options, plugins, onInit } = getEmblaContext(\"<Carousel.Content/>\");\n</script>\n\n<div\n\tclass=\"overflow-hidden\"\n\tuse:emblaCarouselSvelte={{\n\t\toptions: {\n\t\t\tcontainer: \"[data-embla-container]\",\n\t\t\tslides: \"[data-embla-slide]\",\n\t\t\t...$options,\n\t\t\taxis: $orientation === \"horizontal\" ? \"x\" : \"y\",\n\t\t},\n\t\tplugins: $plugins,\n\t}}\n\ton:emblaInit={onInit}\n>\n\t<div\n\t\tbind:this={ref}\n\t\tclass={cn(\"flex\", $orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className)}\n\t\tdata-embla-container=\"\"\n\t\t{...restProps}\n\t>\n\t\t{@render children?.()}\n\t</div>\n</div>\n"
		},
		{
			"name": "carousel-item.svelte",
			"content": "<script>import { getEmblaContext } from \"./context.js\";\nimport { cn } from \"$lib/utils.js\";\nlet {\n  ref = $bindable(null),\n  class: className,\n  children,\n  ...restProps\n} = $props();\nconst { orientation } = getEmblaContext(\"<Carousel.Item/>\");\n</script>\n\n<div\n\tbind:this={ref}\n\trole=\"group\"\n\taria-roledescription=\"slide\"\n\tclass={cn(\n\t\t\"min-w-0 shrink-0 grow-0 basis-full\",\n\t\t$orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n\t\tclassName\n\t)}\n\tdata-embla-slide=\"\"\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n"
		},
		{
			"name": "carousel-next.svelte",
			"content": "<script>import ArrowRight from \"svelte-radix/ArrowRight.svelte\";\nimport { getEmblaContext } from \"./context.js\";\nimport { cn } from \"$lib/utils.js\";\nimport { Button } from \"$lib/registry/new-york/ui/button/index.js\";\nlet {\n  ref = $bindable(null),\n  class: className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...restProps\n} = $props();\nconst { orientation, canScrollNext, scrollNext, handleKeyDown } = getEmblaContext(\"<Carousel.Next/>\");\n</script>\n\n<Button\n\t{variant}\n\t{size}\n\tclass={cn(\n\t\t\"absolute size-8 touch-manipulation rounded-full\",\n\t\t$orientation === \"horizontal\"\n\t\t\t? \"-right-12 top-1/2 -translate-y-1/2\"\n\t\t\t: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\tclassName\n\t)}\n\tdisabled={!$canScrollNext}\n\tonclick={scrollNext}\n\tonkeydown={handleKeyDown}\n\tbind:ref\n\t{...restProps}\n>\n\t<ArrowRight class=\"size-4\" />\n\t<span class=\"sr-only\">Next slide</span>\n</Button>\n"
		},
		{
			"name": "carousel-previous.svelte",
			"content": "<script>import ArrowLeft from \"svelte-radix/ArrowLeft.svelte\";\nimport { getEmblaContext } from \"./context.js\";\nimport { cn } from \"$lib/utils.js\";\nimport { Button } from \"$lib/registry/new-york/ui/button/index.js\";\nlet {\n  ref = $bindable(null),\n  class: className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...restProps\n} = $props();\nconst { orientation, canScrollPrev, scrollPrev, handleKeyDown } = getEmblaContext(\"<Carousel.Previous/>\");\n</script>\n\n<Button\n\t{variant}\n\t{size}\n\tclass={cn(\n\t\t\"absolute size-8 touch-manipulation rounded-full\",\n\t\t$orientation === \"horizontal\"\n\t\t\t? \"-left-12 top-1/2 -translate-y-1/2\"\n\t\t\t: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\tclassName\n\t)}\n\tdisabled={!$canScrollPrev}\n\tonclick={scrollPrev}\n\tonkeydown={handleKeyDown}\n\t{...restProps}\n\tbind:ref\n>\n\t<ArrowLeft class=\"size-4\" />\n\t<span class=\"sr-only\">Previous slide</span>\n</Button>\n"
		},
		{
			"name": "carousel.svelte",
			"content": "<script>import { writable } from \"svelte/store\";\nimport { onDestroy } from \"svelte\";\nimport { setEmblaContext } from \"./context.js\";\nimport { cn } from \"$lib/utils.js\";\nlet {\n  opts = {},\n  plugins = [],\n  api = $bindable(),\n  orientation = \"horizontal\",\n  class: className,\n  children,\n  ...restProps\n} = $props();\nconst apiStore = writable(undefined);\nconst orientationStore = writable(orientation);\nconst canScrollPrev = writable(false);\nconst canScrollNext = writable(false);\nconst optionsStore = writable(opts);\nconst pluginStore = writable(plugins);\nconst scrollSnapsStore = writable([]);\nconst selectedIndexStore = writable(0);\n$: orientationStore.set(orientation);\n$: pluginStore.set(plugins);\n$: optionsStore.set(opts);\nfunction scrollPrev() {\n  api?.scrollPrev();\n}\nfunction scrollNext() {\n  api?.scrollNext();\n}\nfunction scrollTo(index, jump) {\n  api?.scrollTo(index, jump);\n}\nfunction onSelect(api2) {\n  if (!api2) return;\n  canScrollPrev.set(api2.canScrollPrev());\n  canScrollNext.set(api2.canScrollNext());\n}\n$: if (api) {\n  onSelect(api);\n  api.on(\"select\", onSelect);\n  api.on(\"reInit\", onSelect);\n}\nfunction handleKeyDown(e) {\n  if (e.key === \"ArrowLeft\") {\n    e.preventDefault();\n    scrollPrev();\n  } else if (e.key === \"ArrowRight\") {\n    e.preventDefault();\n    scrollNext();\n  }\n}\nsetEmblaContext({\n  api: apiStore,\n  scrollPrev,\n  scrollNext,\n  orientation: orientationStore,\n  canScrollNext,\n  canScrollPrev,\n  handleKeyDown,\n  options: optionsStore,\n  plugins: pluginStore,\n  onInit,\n  scrollSnaps: scrollSnapsStore,\n  selectedIndex: selectedIndexStore,\n  scrollTo\n});\nfunction onInit(event) {\n  api = event.detail;\n  apiStore.set(api);\n  scrollSnapsStore.set(api.scrollSnapList());\n}\nonDestroy(() => {\n  api?.off(\"select\", onSelect);\n});\n</script>\n\n<div class={cn(\"relative\", className)} role=\"region\" aria-roledescription=\"carousel\" {...restProps}>\n\t{@render children?.()}\n</div>\n"
		},
		{
			"name": "context.js",
			"content": "import { getContext, hasContext, setContext } from \"svelte\";\nconst EMBLA_CAROUSEL_CONTEXT = Symbol(\"EMBLA_CAROUSEL_CONTEXT\");\nexport function setEmblaContext(config) {\n    setContext(EMBLA_CAROUSEL_CONTEXT, config);\n    return config;\n}\nexport function getEmblaContext(name = \"This component\") {\n    if (!hasContext(EMBLA_CAROUSEL_CONTEXT)) {\n        throw new Error(`${name} must be used within a <Carousel.Root> component`);\n    }\n    return getContext(EMBLA_CAROUSEL_CONTEXT);\n}\n"
		},
		{
			"name": "index.js",
			"content": "export { default as Root } from \"./carousel.svelte\";\nexport { default as Content } from \"./carousel-content.svelte\";\nexport { default as Item } from \"./carousel-item.svelte\";\nexport { default as Previous } from \"./carousel-previous.svelte\";\nexport { default as Next } from \"./carousel-next.svelte\";\n"
		}
	],
	"type": "components:ui"
}